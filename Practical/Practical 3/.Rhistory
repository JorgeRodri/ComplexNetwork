}
}
B.lp = matrix( modularity_label.values , nrow=length(modularity_label.values)/2, ncol=2, byrow=TRUE)
modularity_betweenness.values<-c()
times_betweeenness<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
print(paste('starting with: ', file))
start.time <- Sys.time()
wc <- cluster_edge_betweenness(G)
end.time <- Sys.time()
time.taken <- end.time - start.time
times_betweeenness<-append(times_betweeenness,c(file,round(time.taken,4)))
modularity_betweenness.values<-append(modularity_betweenness.values,c(file,modularity(wc)))
#print('Saving it in a file.')
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_betweenness.clu' , sep=''))
print(paste(file,' done.'))
}
}
}
T.walktrap = matrix( times_walktrap , nrow=length(times_walktrap)/2, ncol=2, byrow=TRUE)
T.louvain = matrix( times_louvain , nrow=length(times_louvain)/2, ncol=2, byrow=TRUE)
T.label = matrix( times_label , nrow=length(times_label)/2, ncol=2, byrow=TRUE)
T.betweenness = matrix( times_betweeenness , nrow=length(times_betweeenness)/2, ncol=2, byrow=TRUE)
timed=data.frame(T.walktrap[,1],T.louvain[,2],T.label[,2],T.walktrap[,2],T.betweenness[,2])
colnames(timed) <- c("Network Name", "Louvain Method","Label Propagation", "Random Walk", "Edge Betweenness")
timed
round(432111113322020492,4)
start.time <- Sys.time()
wc <- cluster_edge_betweenness(G)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
times_betweeenness
round(3*60*60,4)
round(3*60*60)
round(0.404040404010410401)
modularity_betweenness.values<-c()
times_betweeenness<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
print(paste('starting with: ', file))
start.time <- Sys.time()
wc <- cluster_edge_betweenness(G)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
times_betweeenness<-append(times_betweeenness,c(file,round(time.taken,4)))
modularity_betweenness.values<-append(modularity_betweenness.values,c(file,modularity(wc)))
#print('Saving it in a file.')
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_betweenness.clu' , sep=''))
print(paste(file,' done.'))
}
}
}
B.betweenness = matrix( modularity_betweenness.values , nrow=length(modularity_betweenness.values)/2, ncol=2, byrow=TRUE)
T.betweenness = matrix( times_betweeenness , nrow=length(times_betweeenness)/2, ncol=2, byrow=TRUE)
T.betweenness
timed=data.frame(T.walktrap[,1],T.louvain[,2],T.label[,2],T.walktrap[,2],T.betweenness[,2])
colnames(timed) <- c("Network Name", "Louvain Method","Label Propagation", "Random Walk", "Edge Betweenness")
save(timed,file="Times.Rda")
load("Times.Rda")
library(xtable)
xtable(timed)
3.6808*3600
library(stringr)
library(igraph)
savePartition<- function(net, partitions, name){
content<- paste('*Vertices ', length(V(net)), '\n', sep='')
for (node in V(net)){
for (i in 1:length(partitions)){
if (node %in% unlist(partitions[i])){
content<- paste(content, i, '\n', sep='')
break
}
}
}
write(content, name)
}
loc1='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3-networks/model/256_4_4_2_15_18_p.net'
G <- read_graph(loc1, format =  "pajek")
wc <- cluster_louvain(G)
jpeg('rplot.jpg')
loc1='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/model/256_4_4_2_15_18_p.net'
G <- read_graph(loc1, format =  "pajek")
wc <- cluster_louvain(G)
jpeg('rplot.jpg')
plot(G,wc)
plot.igraph(G,wc)
wc
plot.igraph(G)
dev.off()
G <- read_graph(loc1, format =  "pajek")
wc <- cluster_louvain(G)
plot.igraph(G)
dev.off()
plot.igraph(G)
plot(G,wc)
plot(wc)
loc1='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/model/256_4_4_2_15_18_p.net'
G <- read_graph(loc1, format =  "pajek")
plot.igraph(G)
wc <- cluster_louvain(G)
plot.igraph(G)
plot.igraph(wc,G)
plot.igraph(wc,G)
plot(wc,G)
loc1='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/real/airports_UW.net'
G <- read_graph(loc1, format =  "pajek")
wc <- cluster_louvain(G)
jpeg('rplot.jpg')
plot.igraph(G)
dev.off()
dev.off()
loc1='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/real/airports_UW.net'
G <- read_graph(loc1, format =  "pajek")
wc <- cluster_louvain(G)
coords = layout_with_fr(G)
plot.igraph(wc, G, layout=coords)
plot.igraph(wc, G)
plot(wc, G, layout=coords)
plot(wc, G, layout=coords, label=FALSE)
plot(wc, G, layout=coords, ann=FALSE)
plot(wc, G, layout=coords, labels=FALSE)
plot(wc, G, layout=coords, vertex.label =FALSE)
plot(wc, G, layout=coords, vertex.label =c())
plot(wc, G, layout=coords, vertex.label =' ')
plot(wc, G, vertex.label =' ')
loc1='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/model/256_4_4_2_15_18_p.net'
G <- read_graph(loc1, format =  "pajek")
wc <- cluster_louvain(G)
coords = layout_with_fr(G)
plot(wc, G, layout=coords, vertex.label =' ')
path='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/'
problem.type=c('model/', 'real/', 'toy/')
modularity_walktrap.values<-c()
times_walktrap<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_walktrap(G)
end.time <- Sys.time()
coords = layout_with_fr(G)
jpeg(paste(substr(file,1,nchar(file)-4), '_walktrap.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_walktrap<-append(times_walktrap,c(file,round(time.taken,4)))
modularity_walktrap.values<-append(modularity_walktrap.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
}
}
}
image.folder<-'plots/'
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_walktrap(G)
end.time <- Sys.time()
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(,file,1,nchar(file)-4), '_walktrap.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_walktrap<-append(times_walktrap,c(file,round(time.taken,4)))
modularity_walktrap.values<-append(modularity_walktrap.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
}
}
}
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_walktrap(G)
end.time <- Sys.time()
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_walktrap.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_walktrap<-append(times_walktrap,c(file,round(time.taken,4)))
modularity_walktrap.values<-append(modularity_walktrap.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
}
}
}
dev.off()
dev.off()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_walktrap(G)
end.time <- Sys.time()
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_walktrap.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_walktrap<-append(times_walktrap,c(file,round(time.taken,4)))
modularity_walktrap.values<-append(modularity_walktrap.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
}
}
}
B.walktrap = matrix( modularity_walktrap.values , nrow=length(modularity_walktrap.values)/2, ncol=2, byrow=TRUE)
modularity_louvain.values<-c()
times_louvain<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_louvain(G)
end.time <- Sys.time()
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_louvain.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_louvain<-append(times_louvain,c(file,round(time.taken,4)))
modularity_louvain.values<-append(modularity_louvain.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_louvain.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_louvain.clu' , sep=''))
}
}
}
B.walktrap
B.louvain = matrix( modularity_louvain.values , nrow=length(modularity_louvain.values)/2, ncol=2,byrow=TRUE)
modularity_label.values<-c()
times_label<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_label_prop(G)
end.time <- Sys.time()
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_label_prop.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_label<-append(times_label,c(file,round(time.taken,4)))
modularity_label.values<-append(modularity_label.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_label_prop.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_label_prop.clu' , sep=''))
}
}
}
B.lp = matrix( modularity_label.values , nrow=length(modularity_label.values)/2, ncol=2, byrow=TRUE)
modularity_betweenness.values<-c()
times_betweeenness<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
print(paste('starting with: ', file))
start.time <- Sys.time()
wc <- cluster_edge_betweenness(G)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_betweenness.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
times_betweeenness<-append(times_betweeenness,c(file,round(time.taken,4)))
modularity_betweenness.values<-append(modularity_betweenness.values,c(file,modularity(wc)))
#print('Saving it in a file.')
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_betweenness.clu' , sep=''))
print(paste(file,' done.'))
}
}
}
B.betweenness = matrix( modularity_betweenness.values , nrow=length(modularity_betweenness.values)/2, ncol=2, byrow=TRUE)
library(igraph)
loc1='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/model/256_4_4_2_15_18_p.net'
G <- read_graph(loc1, format =  "pajek")
wc <- cluster_louvain(G)
coords = layout_with_fr(G)
layout_with_kk(G)
coords
library(stringr)
library(igraph)
savePartition<- function(net, partitions, name){
content<- paste('*Vertices ', length(V(net)), '\n', sep='')
for (node in V(net)){
for (i in 1:length(partitions)){
if (node %in% unlist(partitions[i])){
content<- paste(content, i, '\n', sep='')
break
}
}
}
write(content, name)
}
path='C:/Users/jorge/Desktop/MAI/2nd sem/CN/Practical/Practical 3/A3_nets/'
problem.type=c('model/', 'real/', 'toy/')
modularity_walktrap.values<-c()
times_walktrap<-c()
image.folder<-'plots/'
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file) & grepl('airports',file)){
# real.file<-paste(loc,file, sep='')
# G <- read_graph(real.file, format =  "pajek")
#
# start.time <- Sys.time()
# wc <- cluster_walktrap(G)
# end.time <- Sys.time()
# coords = layout_with_fr(G)
# jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_walktrap.jpg' , sep=''))
# plot(wc, G, layout=coords,vertex.label =' ')
# dev.off()
#
# time.taken <- end.time - start.time
# times_walktrap<-append(times_walktrap,c(file,round(time.taken,4)))
# modularity_walktrap.values<-append(modularity_walktrap.values,c(file,modularity(wc)))
# print(paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
# #savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
} else if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_walktrap(G)
end.time <- Sys.time()
coords = layout_with_kk(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_walktrap.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_walktrap<-append(times_walktrap,c(file,round(time.taken,4)))
modularity_walktrap.values<-append(modularity_walktrap.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_walktrap.clu' , sep=''))
}
}
}
B.walktrap = matrix( modularity_walktrap.values , nrow=length(modularity_walktrap.values)/2, ncol=2, byrow=TRUE)
modularity_louvain.values<-c()
times_louvain<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file) & grepl('airports',file)){
# real.file<-paste(loc,file, sep='')
# G <- read_graph(real.file, format =  "pajek")
# start.time <- Sys.time()
# wc <- cluster_louvain(G)
# end.time <- Sys.time()
#
# coords = layout_with_fr(G)
# jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_louvain.jpg' , sep=''))
# plot(wc, G, layout=coords,vertex.label =' ')
# dev.off()
#
# time.taken <- end.time - start.time
# times_louvain<-append(times_louvain,c(file,round(time.taken,4)))
# modularity_louvain.values<-append(modularity_louvain.values,c(file,modularity(wc)))
# print(paste(loc, substr(file,1,nchar(file)-4), '_louvain.clu' , sep=''))
} else if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_louvain(G)
end.time <- Sys.time()
coords = layout_with_kk(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_louvain.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_louvain<-append(times_louvain,c(file,round(time.taken,4)))
modularity_louvain.values<-append(modularity_louvain.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_louvain.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_louvain.clu' , sep=''))
}
}
}
B.louvain = matrix( modularity_louvain.values , nrow=length(modularity_louvain.values)/2, ncol=2,byrow=TRUE)
modularity_label.values<-c()
times_label<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if(grepl('.net', file) & grepl('airports',file)){
# real.file<-paste(loc,file, sep='')
# G <- read_graph(real.file, format =  "pajek")
# start.time <- Sys.time()
# wc <- cluster_label_prop(G)
# end.time <- Sys.time()
#
# coords = layout_with_fr(G)
# jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_label_prop.jpg' , sep=''))
# plot(wc, G, layout=coords,vertex.label =' ')
# dev.off()
#
# time.taken <- end.time - start.time
# times_label<-append(times_label,c(file,round(time.taken,4)))
# modularity_label.values<-append(modularity_label.values,c(file,modularity(wc)))
# print(paste(loc, substr(file,1,nchar(file)-4), '_label_prop.clu' , sep=''))
# #savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_label_prop.clu' , sep=''))
} else if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
start.time <- Sys.time()
wc <- cluster_label_prop(G)
end.time <- Sys.time()
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_label_prop.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
time.taken <- end.time - start.time
times_label<-append(times_label,c(file,round(time.taken,4)))
modularity_label.values<-append(modularity_label.values,c(file,modularity(wc)))
print(paste(loc, substr(file,1,nchar(file)-4), '_label_prop.clu' , sep=''))
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_label_prop.clu' , sep=''))
}
}
}
B.lp = matrix( modularity_label.values , nrow=length(modularity_label.values)/2, ncol=2, byrow=TRUE)
modularity_betweenness.values<-c()
times_betweeenness<-c()
for (folder in problem.type){
loc<-paste(path,folder, sep='')
files=list.files(loc)
for (file in files){
if (grepl('.net', file) & grepl('airports',file)){
# real.file<-paste(loc,file, sep='')
# G <- read_graph(real.file, format =  "pajek")
# print(paste('starting with: ', file))
# start.time <- Sys.time()
# wc <- cluster_edge_betweenness(G)
# end.time <- Sys.time()
#
# time.taken <- end.time - start.time
# print(time.taken)
# coords = layout_with_fr(G)
# jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_betweenness.jpg' , sep=''))
# plot(wc, G, layout=coords,vertex.label =' ')
# dev.off()
# times_betweeenness<-append(times_betweeenness,c(file,round(time.taken,4)))
# modularity_betweenness.values<-append(modularity_betweenness.values,c(file,modularity(wc)))
# #print('Saving it in a file.')
# #savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_betweenness.clu' , sep=''))
# print(paste(file,' done.'))
} else if (grepl('.net', file)){
real.file<-paste(loc,file, sep='')
G <- read_graph(real.file, format =  "pajek")
print(paste('starting with: ', file))
start.time <- Sys.time()
wc <- cluster_edge_betweenness(G)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
coords = layout_with_fr(G)
jpeg(paste(image.folder,substr(file,1,nchar(file)-4), '_betweenness.jpg' , sep=''))
plot(wc, G, layout=coords,vertex.label =' ')
dev.off()
times_betweeenness<-append(times_betweeenness,c(file,round(time.taken,4)))
modularity_betweenness.values<-append(modularity_betweenness.values,c(file,modularity(wc)))
#print('Saving it in a file.')
#savePartition(G,wc,paste(loc, substr(file,1,nchar(file)-4), '_betweenness.clu' , sep=''))
print(paste(file,' done.'))
}
}
}
